# Sistema de Gerenciamento de Salas com Chat

Este projeto é um sistema de gerenciamento de salas, onde usuários podem criar, visualizar, entrar e excluir salas. Cada sala possui capacidade limitada e um chat em tempo real, implementado com `Socket.IO`. O sistema também possui autenticação de usuários utilizando `JWT` para garantir que apenas usuários autenticados possam acessar o chat.

## Funcionalidades

- **Autenticação de Usuários**: Registro, login e verificação de usuários autenticados.
- **Gerenciamento de Salas**: Criação, listagem, entrada e exclusão de salas.
- **Capacidade de Salas**: Cada sala possui uma capacidade máxima de usuários.
- **Chat em Tempo Real**: Comunicação entre usuários na mesma sala.
- **Interface Responsiva**: A interface é estilizada usando `Tailwind CSS` e adapta-se a diferentes tamanhos de tela.
- **Notificação de Entrada de Novos Usuários**: O sistema notifica o chat quando novos usuários entram na sala.

## Tecnologias Utilizadas

### Backend:
- **Node.js**: Plataforma JavaScript para o backend.
- **Express.js**: Framework para criar a API RESTful.
- **MongoDB**: Banco de dados NoSQL utilizado para armazenar as informações das salas.
- **Socket.IO**: Biblioteca para comunicação em tempo real (chat).
- **JWT (JSON Web Token)**: Usado para autenticação de usuários.
- **Bcrypt**: Para hash e verificação de senhas.

### Frontend:
- **HTML5**: Estruturação das páginas web.
- **Tailwind CSS**: Framework CSS para estilização responsiva.
- **JavaScript (ES6+)**: Lógica de interação do front-end com o backend e gerenciamento de eventos do `Socket.IO`.

## Instalação

### Pré-requisitos
- **Node.js**: Certifique-se de ter o [Node.js](https://nodejs.org/) instalado.
- **MongoDB**: Um banco de dados MongoDB deve estar rodando.

### Passos

1. Clone o repositório:

    ```bash
    git clone https://github.com/seu-usuario/seu-repositorio.git
    ```

2. Entre na pasta do projeto:

    ```bash
    cd nome-do-projeto
    ```

3. Instale as dependências:

    ```bash
    npm install
    ```

4. Crie um arquivo `.env` na raiz do projeto com as seguintes variáveis:

    ```env
    PORT=3000
    JWT_SECRET=sua-chave-secreta
    MONGO_URI=sua-uri-do-mongo
    ```

5. Inicie o servidor:

    ```bash
    npm start
    ```

O servidor estará rodando em `http://localhost:3000`.

## Uso

### Autenticação
- O sistema utiliza JWT para autenticação de usuários.
- O token JWT é armazenado no `localStorage` e usado para autenticação nas requisições subsequentes.

### Gerenciamento de Salas
- **Criar uma Sala**: Os usuários podem criar salas, fornecendo um nome, descrição e capacidade.
- **Listar Salas**: O usuário autenticado pode visualizar todas as salas disponíveis.
- **Entrar em uma Sala**: Ao clicar em "Entrar", o usuário será redirecionado para a sala selecionada, onde poderá interagir no chat.
- **Excluir Sala**: O usuário pode excluir salas. Um modal de confirmação será exibido antes da exclusão.

### Chat em Tempo Real
- Uma vez dentro de uma sala, os usuários podem enviar mensagens que serão transmitidas em tempo real para todos os outros usuários da sala.

## Estrutura do Projeto

```bash
├── src
│   ├── controllers
│   │   ├── authController.js
│   │   ├── roomController.js
│   ├── models
│   │   ├── roomModel.js
│   │   ├── userModel.js
│   ├── public
│   │   ├── css
│   │   ├── js
│   ├── routes
│   │   ├── authRoutes.js
│   │   ├── roomRoutes.js
│   ├── server.js
│   └── socket.js
├── .env
├── package.json
└── README.md
